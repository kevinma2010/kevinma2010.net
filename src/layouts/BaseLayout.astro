---
import { SITE } from '../site.config';

export interface Props {
  title: string;
  description?: string;
  image?: string;
}

const { title, description = SITE.defaultDescription, image } = Astro.props;
const canonicalURL = new URL(Astro.url.pathname, Astro.site);
const base = import.meta.env.BASE_URL.endsWith('/') ? import.meta.env.BASE_URL : import.meta.env.BASE_URL + '/';
const pageTitle = title === SITE.title ? title : `${title} | ${SITE.title}`;
---

<!DOCTYPE html>
<html lang={SITE.language}>
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="icon" type="image/svg+xml" href={`${base}favicon.svg`} />
    <link rel="alternate icon" type="image/x-icon" href={`${base}favicon.ico`} />
    <meta name="generator" content={Astro.generator} />
    
    <title>{pageTitle}</title>
    <meta name="description" content={description} />
    <link rel="canonical" href={canonicalURL} />
    
    <meta property="og:title" content={title} />
    <meta property="og:description" content={description} />
    <meta property="og:type" content="website" />
    <meta property="og:url" content={canonicalURL} />
    {image && <meta property="og:image" content={new URL(image, Astro.url)} />}
    
    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:title" content={title} />
    <meta name="twitter:description" content={description} />
    {image && <meta name="twitter:image" content={new URL(image, Astro.url)} />}
    
    <link rel="sitemap" href={`${base}sitemap-index.xml`} />
    <link rel="alternate" type="application/rss+xml" title="RSS" href={`${base}rss.xml`} />
  </head>
  <body>
    <div class="container center">
      <header class="header">
        <div class="header__inner">
          <div class="header__logo">
            <a href={base}>
              <div class="logo">
                {SITE.title}
              </div>
            </a>
          </div>
          <ul class="menu menu--mobile">
            <li class="menu__trigger">Menu â–¾</li>
            <li>
              <ul class="menu__dropdown">
                {SITE.navigation.main.map(item => (
                  <li><a href={`${base}${item.href.slice(1)}`}>{item.name}</a></li>
                ))}
              </ul>
            </li>
          </ul>
        </div>
        
        <nav class="navigation-menu">
          <ul class="navigation-menu__inner menu--desktop">
            {SITE.navigation.main.map(item => (
              <li><a href={`${base}${item.href.slice(1)}`}>{item.name}</a></li>
            ))}
          </ul>
        </nav>
      </header>
      
      <main class="content">
        <slot />
      </main>
      
      <footer class="footer">
        <div class="footer__inner">
          <div class="copyright">
            <span>{SITE.footer.copyright}</span>
            {SITE.footer.poweredBy && (
              <>
                <span class="separator">::</span>
                <span>Powered by <a href="https://astro.build">Astro</a></span>
              </>
            )}
            {SITE.footer.themeCredits && (
              <>
                <span class="separator">::</span>
                <span>Theme by <a href="https://github.com/panr/hugo-theme-terminal" target="_blank">panr</a></span>
              </>
            )}
          </div>
        </div>
      </footer>
    </div>
    
    <script>
      // Menu functionality
      (() => {
        const container = document.querySelector(".container");
        const menus = document.querySelectorAll(".menu");
        
        // Close menus when clicking outside
        document.body.addEventListener("click", () => {
          menus.forEach(menu => {
            if (menu.classList.contains("open")) {
              menu.classList.remove("open");
            }
          });
        });
        
        // Close menus on window resize
        window.addEventListener("resize", () => {
          menus.forEach(menu => {
            menu.classList.remove("open");
          });
        });
        
        // Menu trigger functionality
        menus.forEach(menu => {
          const trigger = menu.querySelector(".menu__trigger");
          const dropdown = menu.querySelector(".menu__dropdown");
          
          if (trigger && dropdown) {
            trigger.addEventListener("click", event => {
              event.stopPropagation();
              
              if (menu.classList.contains("open")) {
                menu.classList.remove("open");
              } else {
                // Close other menus
                menus.forEach(m => m.classList.remove("open"));
                menu.classList.add("open");
              }
              
              // Adjust dropdown position if it goes outside container
              if (dropdown.getBoundingClientRect().right > container.getBoundingClientRect().right) {
                dropdown.style.left = "auto";
                dropdown.style.right = "0";
              }
            });
            
            dropdown.addEventListener("click", e => e.stopPropagation());
          }
        });
      })();
    </script>
  </body>
</html>

<style is:global>
  /* Import all CSS files in the correct order */
  @import "../styles/terminal.css";
  @import "../styles/fonts.css";
  @import "../styles/main.css";
  @import "../styles/header.css";
  @import "../styles/menu.css";
  @import "../styles/footer.css";
  @import "../styles/buttons.css";
  @import "../styles/post.css";
  @import "../styles/pagination.css";
  @import "../styles/code.css";
  @import "../styles/syntax.css";
  @import "../styles/gist.css";
  @import "../styles/terms.css";
</style>